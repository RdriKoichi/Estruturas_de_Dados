#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

//imcompleto

typedef struct  {
    int chave;
} objeto;

typedef struct NoLista *PtrNoLista;

typedef struct NoLista {
    objeto elemento;
    PtrNoLista proximo;
} NoLista;

typedef struct {
    PtrNoLista primeiro;
    int tamanho;
} Lista;


void iniciaLista(Lista *list){
    list -> primeiro = NULL;
    list -> tamanho = 0;
}

bool estaVazia(Lista *list){
    if(list -> primeiro == NULL) {
        return true;
    }else
        return false;
}

bool pesquisar(Lista *list, int key){
    if(estaVazia(list) == true){
        return false;
    }
    PtrNoLista aux;
    while(aux != NULL && key > aux -> elemento.chave) {
        aux = aux->proximo;
    }
    if (aux == NULL || aux -> elemento.chave > key) {
        return false;
    }
    return true;
}

void inserir(Lista *list, objeto x){
    PtrNoLista new;
    new = (PtrNoLista) malloc(sizeof(NoLista));
    new -> elemento = x;

    if(estaVazia(list) == true ||(x.chave < list -> primeiro -> elemento.chave)){
        new -> proximo = list -> primeiro;
        list -> primeiro = new;
    }else {
        PtrNoLista aux;
        aux = list -> primeiro;

        while (aux -> proximo != NULL && x.chave > aux -> proximo -> elemento.chave) {
            aux = aux -> proximo;
        }
        new -> proximo = aux -> proximo;
        aux -> proximo = new;
    }
    list -> tamanho++;
}

int tamanhoLista(Lista *list){
    return(list -> tamanho);
}
void removePrimeiro(Lista *list, objeto *item){
     
}

void removerElemento(Lista *list, objeto *item, int chave){

    if(estaVazia(list) == true || (chave < list -> primeiro -> elemento.chave)){
        return false;
    }
    else {
        if (chave == list->primeiro->elemento.chave) {
            printf("removeu!!\n");
            removePrimeiro(list, item);
        }
        else{
            PtrNoLista aux = list -> primeiro;
            while((aux -> proximo != NULL) && (chave > aux -> proximo -> elemento.chave)){
                aux = aux -> proximo;
            }
            if((aux -> proximo == NULL) || (chave < aux -> proximo -> elemento.chave)){
                printf("Nao Existe!!!");
            }
            else{
                PtrNoLista remove = aux -> proximo;
                aux -> proximo = aux -> proximo -> proximo;
                list -> tamanho--;
                free(remove);
            }
        }
    }
}

void removeUltimo(Lista *list, objeto *item){
    if(estaVazia(list) == 0){
        if(tamanhoLista(list) == 1){
            removePrimeiro(list, item);
        }
        else{
            PtrNoLista  aux;
            aux = list -> primeiro;

            for (aux = list -> primeiro; aux -> proximo -> proximo != NULL; aux = aux -> proximo);
            PtrNoLista remove = aux -> proximo;
            *item = remove -> elemento;
            aux -> proximo = NULL;
            free(remove);
            printf("Elemento removido: %d\n", (*item).chave);
            list -> tamanho = list -> tamanho-1;
        }
    }else{
        printf("Esta Vazia!!!");
    }
}
objeto primeiro(Lista *list){
    objeto aux = list -> primeiro -> elemento;
    return(aux);
}
objeto ultimo(Lista *list);

int main() {

    return(0);
}
